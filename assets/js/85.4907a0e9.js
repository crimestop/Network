(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{436:function(t,s,a){"use strict";a.r(s);var e=a(42),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"net-network"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#net-network"}},[t._v("#")]),t._v(" net::network")]),t._v(" "),a("p",[t._v("网络包含格点和格点上的半边，两个半边可以相连接  "),a("a",{attrs:{href:"#detailed-description"}},[t._v("More...")])]),t._v(" "),a("p",[a("code",[t._v("#include <network.hpp>")])]),t._v(" "),a("p",[t._v("Inherits from std::map< std::string, node< NodeVal, EdgeVal, std::string, stdEdgeKey, default_traits< NodeVal, EdgeVal, std::string, stdEdgeKey > >, Trait::nodekey_less >")]),t._v(" "),a("h2",{attrs:{id:"public-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-types"}},[t._v("#")]),t._v(" Public Types")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",[t._v("Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("using typename "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html"}},[t._v("network")]),t._v("< NodeVal, EdgeVal, NodeKey, EdgeKey, Trait >::iterator")],1),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")])],1)])]),t._v(" "),a("tr",[a("td",[t._v("using "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1node.html"}},[t._v("node")]),t._v("< NodeVal, EdgeVal, NodeKey, EdgeKey, Trait >")],1),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-nodetype"}},[t._v("NodeType")])],1)])]),t._v(" "),a("tr",[a("td",[t._v("using NodeKey")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-nodekeytype"}},[t._v("NodeKeyType")])],1)])]),t._v(" "),a("tr",[a("td",[t._v("using std::set< NodeKey, typename Trait::nodekey_less >")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-nodekeysettype"}},[t._v("NodeKeySetType")])],1)])]),t._v(" "),a("tr",[a("td",[t._v("using NodeVal")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-nodevaltype"}},[t._v("NodeValType")])],1)])]),t._v(" "),a("tr",[a("td",[t._v("using EdgeKey")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-edgekeytype"}},[t._v("EdgeKeyType")])],1)])]),t._v(" "),a("tr",[a("td",[t._v("using EdgeVal")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-edgevaltype"}},[t._v("EdgeValType")])],1)])]),t._v(" "),a("tr",[a("td",[t._v("using Trait")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-traittype"}},[t._v("TraitType")])],1)])])])]),t._v(" "),a("h2",{attrs:{id:"public-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-functions"}},[t._v("#")]),t._v(" Public Functions")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",[t._v("Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td"),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-network"}},[t._v("network")])],1),t._v("() =default")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-network"}},[t._v("network")])],1),t._v("(const "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html"}},[t._v("network")]),t._v("< NodeVal, EdgeVal, NodeKey, EdgeKey, Trait > & N)")],1)]),t._v(" "),a("tr",[a("td",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html"}},[t._v("network")]),t._v("< NodeVal, EdgeVal, NodeKey, EdgeKey, Trait > &")],1),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-operator="}},[t._v("operator=")])],1),t._v("(const "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html"}},[t._v("network")]),t._v("< NodeVal, EdgeVal, NodeKey, EdgeKey, Trait > & N)")],1)]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-network"}},[t._v("network")])],1),t._v("("),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html"}},[t._v("network")]),t._v("< NodeVal, EdgeVal, NodeKey, EdgeKey, Trait > && ) =default")],1)]),t._v(" "),a("tr",[a("td",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html"}},[t._v("network")]),t._v("< NodeVal, EdgeVal, NodeKey, EdgeKey, Trait > &")],1),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-operator="}},[t._v("operator=")])],1),t._v("("),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html"}},[t._v("network")]),t._v("< NodeVal, EdgeVal, NodeKey, EdgeKey, Trait > && ) =default")],1)]),t._v(" "),a("tr",[a("td",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")])],1),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-add"}},[t._v("add")])],1),t._v("(const NodeKey & nodekey) "),a("br"),t._v("加一个格点，返回这个格点的iterator")])]),t._v(" "),a("tr",[a("td",[t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-add"}},[t._v("add")])],1),t._v("(const "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html"}},[t._v("network")]),t._v("< NodeVal, EdgeVal, NodeKey, EdgeKey, Trait > & n) "),a("br"),t._v("加一个网络")],1)]),t._v(" "),a("tr",[a("td",[t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-add_edge"}},[t._v("add_edge")])],1),t._v("(const NodeKey & nodekey1, const NodeKey & nodekey2, const EdgeKey & ind1, const EdgeKey & ind2, const EdgeVal & edgeval =EdgeVal()) "),a("br"),t._v("加一条边")])]),t._v(" "),a("tr",[a("td",[t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-add_edge"}},[t._v("add_edge")])],1),t._v("("),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")]),t._v(" , "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")]),t._v(" , const EdgeKey & , const EdgeKey & , const EdgeVal &  =EdgeVal())")],1)]),t._v(" "),a("tr",[a("td",[t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-add_edge"}},[t._v("add_edge")])],1),t._v("(const NodeKey & nodekey1, const NodeKey & nodekey2, const EdgeVal & edgeval =EdgeVal()) "),a("br"),t._v("加一条边。根据格点名字和Trait::bind自动生成边的名字")])]),t._v(" "),a("tr",[a("td",[t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-add_edge"}},[t._v("add_edge")])],1),t._v("("),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")]),t._v(" , "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")]),t._v(" , const EdgeVal &  =EdgeVal())")],1)]),t._v(" "),a("tr",[a("td",[t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-connect_edge"}},[t._v("connect_edge")])],1),t._v("(const NodeKey & nodekey1, const NodeKey & nodekey2, const EdgeKey & ind1, const EdgeKey & ind2) "),a("br"),t._v("连接两条半边")])]),t._v(" "),a("tr",[a("td",[t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-connect_edge"}},[t._v("connect_edge")])],1),t._v("("),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")]),t._v(" , "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")]),t._v(" , const EdgeKey & , const EdgeKey & )")],1)]),t._v(" "),a("tr",[a("td",[t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-add_half_edge"}},[t._v("add_half_edge")])],1),t._v("(const NodeKey & nodekey1, const EdgeKey & ind1, const EdgeVal & edgeval =EdgeVal()) "),a("br"),t._v("加一条半边")])]),t._v(" "),a("tr",[a("td",[t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-add_half_edge"}},[t._v("add_half_edge")])],1),t._v("("),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")]),t._v(" , const EdgeKey & , const EdgeVal &  =EdgeVal())")],1)]),t._v(" "),a("tr",[a("td",[t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-del"}},[t._v("del")])],1),t._v("(const NodeKey & nodekey) "),a("br"),t._v("删除一个格点")])]),t._v(" "),a("tr",[a("td",[t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-del"}},[t._v("del")])],1),t._v("("),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")]),t._v(" )")],1)]),t._v(" "),a("tr",[a("td",[t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-del_edges"}},[t._v("del_edges")])],1),t._v("(const NodeKey & nodekey1, const NodeKey & nodekey2) "),a("br"),t._v("删除两个格点之间的所有边")])]),t._v(" "),a("tr",[a("td",[t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-del_edges"}},[t._v("del_edges")])],1),t._v("("),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")]),t._v(" , "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")]),t._v(" )")],1)]),t._v(" "),a("tr",[a("td",[t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-del_edge"}},[t._v("del_edge")])],1),t._v("(const NodeKey & nodekey, const EdgeKey & ind) "),a("br"),t._v("删除一个腿连着的边")])]),t._v(" "),a("tr",[a("td",[t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-del_edge"}},[t._v("del_edge")])],1),t._v("("),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")]),t._v(" , const EdgeKey & )")],1)]),t._v(" "),a("tr",[a("td",[t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-del_half_edge"}},[t._v("del_half_edge")])],1),t._v("(const NodeKey & nodekey, const EdgeKey & ind) "),a("br"),t._v("删除一个半边")])]),t._v(" "),a("tr",[a("td",[t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-del_half_edge"}},[t._v("del_half_edge")])],1),t._v("("),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")]),t._v(" , const EdgeKey & )")],1)]),t._v(" "),a("tr",[a("td",[t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-break_edge"}},[t._v("break_edge")])],1),t._v("(const NodeKey & nodekey, const EdgeKey & ind) "),a("br"),t._v("将一个半边组成的边拆开")])]),t._v(" "),a("tr",[a("td",[t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-break_edge"}},[t._v("break_edge")])],1),t._v("("),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")]),t._v(" , const EdgeKey & )")],1)]),t._v(" "),a("tr",[a("td",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")])],1),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-rename"}},[t._v("rename")])],1),t._v("(const NodeKey & old_key, const NodeKey & new_key) "),a("br"),t._v("重命名一个格点")])]),t._v(" "),a("tr",[a("td",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")])],1),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-rename"}},[t._v("rename")])],1),t._v("(const "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")]),t._v(" & , const NodeKey & )")],1)]),t._v(" "),a("tr",[a("td",[t._v("int")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-edge_num"}},[t._v("edge_num")])],1),t._v("(const NodeKey & nk) "),a("br"),t._v("返回边数目")])]),t._v(" "),a("tr",[a("td",[t._v("int")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-edge_num"}},[t._v("edge_num")])],1),t._v("(const "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")]),t._v(" & )")],1)]),t._v(" "),a("tr",[a("td",[t._v("template <typename absorb_type ,typename contract_type >"),a("br"),t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-absorb"}},[t._v("absorb")])],1),t._v("(const NodeKey & nodekey1, const NodeKey & nodekey2, const absorb_type & absorb_fun, const contract_type & contract_fun) "),a("br"),t._v("缩并两个格点，以及它们相连的边")])]),t._v(" "),a("tr",[a("td",[t._v("template <typename absorb_type ,typename contract_type >"),a("br"),t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-absorb"}},[t._v("absorb")])],1),t._v("("),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")]),t._v(" , "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")]),t._v(" , const absorb_type & , const contract_type & )")],1)]),t._v(" "),a("tr",[a("td",[t._v("template <typename split_type >"),a("br"),t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-split"}},[t._v("split")])],1),t._v("(const NodeKey & nodekey1, const NodeKey & nodekey2, const NodeKey & nodekey3, const std::unordered_set< EdgeKey > & inds, const EdgeKey & ind2, const EdgeKey & ind3, const split_type & split_fun) "),a("br"),t._v("将格点1分解为格点2和格点3，inds为属于格点3点半边，格点2和格点3通过半边ind2和ind3相连。")])]),t._v(" "),a("tr",[a("td",[t._v("template <typename split_type >"),a("br"),t._v("std::pair< "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")]),t._v(", "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")]),t._v(" >")],1),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-split"}},[t._v("split")])],1),t._v("("),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")]),t._v(" , const NodeKey & , const NodeKey & , const std::unordered_set< EdgeKey > & , const EdgeKey & , const EdgeKey & , const split_type & )")],1)]),t._v(" "),a("tr",[a("td",[t._v("template <typename split_type >"),a("br"),t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-split"}},[t._v("split")])],1),t._v("(const NodeKey & nodekey1, const NodeKey & nodekey2, const std::unordered_set< EdgeKey > & inds, const EdgeKey & ind1, const EdgeKey & ind2, const split_type & split_fun) "),a("br"),t._v("将格点1分解为格点1和格点2，inds为属于格点2点半边，格点1和格点2通过半边ind2和ind3相连。")])]),t._v(" "),a("tr",[a("td",[t._v("template <typename split_type >"),a("br"),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")])],1),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-split"}},[t._v("split")])],1),t._v("("),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")]),t._v(" , const NodeKey & , const std::unordered_set< EdgeKey > & , const EdgeKey & , const EdgeKey & , const split_type & )")],1)]),t._v(" "),a("tr",[a("td",[t._v("std::string")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-gviz"}},[t._v("gviz")])],1),t._v("(const std::string & title, const std::vector< std::set< NodeKey, typename Trait::nodekey_less > > & groups, const bool label_bond) const "),a("br"),t._v("将网络转化为graphviz格式的字符串")])]),t._v(" "),a("tr",[a("td",[t._v("std::string")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-gviz_legend"}},[t._v("gviz_legend")])],1),t._v("(const std::vector< std::set< NodeKey, typename Trait::nodekey_less > > & groups) const")])]),t._v(" "),a("tr",[a("td",[t._v("bool")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-contains"}},[t._v("contains")])],1),t._v("(const NodeKey & nodekey) "),a("br"),t._v("判断网络是否包含一个格点")])]),t._v(" "),a("tr",[a("td",[t._v("bool")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-consistency"}},[t._v("consistency")])],1),t._v("(std::ostream & diagnosis =std::cout) const "),a("br"),t._v("判断网络是否是没有冲突")])]),t._v(" "),a("tr",[a("td",[t._v("template <typename absorb_type ,typename contract_type >"),a("br"),t._v("NodeVal")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-contract"}},[t._v("contract")])],1),t._v("(const absorb_type & absorb_fun, const contract_type & contract_fun) const "),a("br"),t._v("缩并整个网络（不改变网络，只得到值）")])]),t._v(" "),a("tr",[a("td",[t._v("template <typename absorb_type ,typename contract_type >"),a("br"),t._v("NodeVal")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-contract"}},[t._v("contract")])],1),t._v("(std::set< NodeKey, typename Trait::nodekey_less > part, const absorb_type & absorb_fun, const contract_type & contract_fun) const "),a("br"),t._v("缩并一部分网络（不改变网络，只得到值）")])]),t._v(" "),a("tr",[a("td",[t._v("template <typename TreeType ,typename absorb_type ,typename contract_type >"),a("br"),t._v("NodeVal")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-contract_tree"}},[t._v("contract_tree")])],1),t._v("(std::shared_ptr< TreeType > ctree, const absorb_type & absorb_fun, const contract_type & contract_fun) const "),a("br"),t._v("缩并一个树（不改变网络，只得到值）")])]),t._v(" "),a("tr",[a("td",[t._v("template <typename absorb_type ,typename contract_type >"),a("br"),t._v("NodeKey")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-absorb"}},[t._v("absorb")])],1),t._v("(std::set< NodeKey, typename Trait::nodekey_less > part, const absorb_type & absorb_fun, const contract_type & contract_fun) "),a("br"),t._v("缩并一部分网络（改变网络）")])]),t._v(" "),a("tr",[a("td",[t._v("template <typename TreeType ,typename absorb_type ,typename contract_type >"),a("br"),t._v("NodeKey")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-absorb_tree"}},[t._v("absorb_tree")])],1),t._v("(std::shared_ptr< TreeType > ctree, const absorb_type & absorb_fun, const contract_type & contract_fun) "),a("br"),t._v("缩并一个树（改变网络）")])]),t._v(" "),a("tr",[a("td",[t._v("template <typename absorb_type ,typename contract_type >"),a("br"),t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-tn_contract1"}},[t._v("tn_contract1")])],1),t._v("(const NodeKey & nodekey, const std::set< NodeKey, typename Trait::nodekey_less > & group, NodeVal & ten, const absorb_type & absorb_fun, const contract_type & contract_fun) const "),a("br"),t._v("缩并的辅助函数")])]),t._v(" "),a("tr",[a("td",[t._v("template <typename absorb_type ,typename contract_type >"),a("br"),t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-tn_contract1"}},[t._v("tn_contract1")])],1),t._v("("),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("IterNode")]),t._v(" , const std::set< NodeKey, typename Trait::nodekey_less > & , NodeVal & , const absorb_type & , const contract_type & ) const")],1)]),t._v(" "),a("tr",[a("td",[t._v("template <typename absorb_type ,typename contract_type >"),a("br"),t._v("NodeVal")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-tn_contract2"}},[t._v("tn_contract2")])],1),t._v("(const std::set< NodeKey, typename Trait::nodekey_less > & group1, const NodeVal & ten1, const std::set< NodeKey, typename Trait::nodekey_less > & group2, const NodeVal & ten2, const absorb_type & absorb_fun, const contract_type & contract_fun) const "),a("br"),t._v("缩并的辅助函数")])]),t._v(" "),a("tr",[a("td",[t._v("template <typename NetType2 >"),a("br"),t._v("NetType2")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-fmap"}},[t._v("fmap")])],1),t._v("(std::function< typename NetType2::NodeValType(const NodeVal &)> f1, std::function< typename NetType2::EdgeValType(const EdgeVal &)> f2) const "),a("br"),t._v("利用格点上的信息的函数和边上信息的函数从一个网络得到另一个网络")])]),t._v(" "),a("tr",[a("td",[t._v("template <typename NetType2 >"),a("br"),t._v("NetType2")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-fmap"}},[t._v("fmap")])],1),t._v("(std::function< typename NetType2::NodeValType(const NodeVal &)> f1, std::function< typename NetType2::EdgeValType(const EdgeVal &)> f2, std::function< typename NetType2::NodeKeyType(const NodeKey &)> f3, std::function< typename NetType2::EdgeKeyType(const EdgeKey &)> f4) const "),a("br"),t._v("利用格点上的信息的函数和边上信息的函数从一个网络得到另一个网络，同时做sitekey和edgekey的变换")])]),t._v(" "),a("tr",[a("td",[t._v("template <typename NodeVal2 ,typename EdgeVal2 ,typename Trait2 >"),a("br"),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html"}},[t._v("network")]),t._v("< NodeVal2, EdgeVal2, NodeKey, EdgeKey, Trait2 >")],1),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-gfmap"}},[t._v("gfmap")])],1),t._v("(std::function< NodeVal2(const "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1node.html"}},[t._v("node")]),t._v("< NodeVal, EdgeVal, NodeKey, EdgeKey, Trait > &)> f1, std::function< EdgeVal2(const "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1node.html"}},[t._v("node")]),t._v("< NodeVal, EdgeVal, NodeKey, EdgeKey, Trait > &, const EdgeKey &)> f2) const "),a("br"),t._v("利用格点上的信息的函数和边上信息的函数从一个网络得到另一个网络")],1)]),t._v(" "),a("tr",[a("td",[t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-fope"}},[t._v("fope")])],1),t._v("(std::function< NodeVal(const NodeVal &)> f1, std::function< EdgeVal(const EdgeVal &)> f2) "),a("br"),t._v("利用函数更新格点和边上的信息")])]),t._v(" "),a("tr",[a("td",[t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-gfope"}},[t._v("gfope")])],1),t._v("(std::function< NodeVal(const "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1node.html"}},[t._v("node")]),t._v("< NodeVal, EdgeVal, NodeKey, EdgeKey, Trait > &)> f1, std::function< EdgeVal(const "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1node.html"}},[t._v("node")]),t._v("< NodeVal, EdgeVal, NodeKey, EdgeKey, Trait > &, const EdgeKey &)> f2) "),a("br"),t._v("利用函数更新格点和边上的信息，可用于初始化")],1)]),t._v(" "),a("tr",[a("td",[t._v("template <typename absorb_type ,typename contract_type >"),a("br"),t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-absorb"}},[t._v("absorb")])],1),t._v("("),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html"}},[t._v("network")]),t._v("< NodeVal, EdgeVal, NodeKey, EdgeKey, Trait >"),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("::IterNode")]),t._v(" node_itr1, "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html"}},[t._v("network")]),t._v("< NodeVal, EdgeVal, NodeKey, EdgeKey, Trait >"),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("::IterNode")]),t._v(" node_itr2, const absorb_type & absorb_fun, const contract_type & contract_fun) "),a("br"),t._v("缩并两个格点，以及它们相连的边")],1)]),t._v(" "),a("tr",[a("td",[t._v("template <typename split_type >"),a("br"),t._v("std::pair< typename "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html"}},[t._v("network")]),t._v("< NodeVal, EdgeVal, NodeKey, EdgeKey, Trait >"),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("::IterNode")]),t._v(", typename "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html"}},[t._v("network")]),t._v("< NodeVal, EdgeVal, NodeKey, EdgeKey, Trait >"),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("::IterNode")]),t._v(" >")],1),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-split"}},[t._v("split")])],1),t._v("("),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html"}},[t._v("network")]),t._v("< NodeVal, EdgeVal, NodeKey, EdgeKey, Trait >"),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("::IterNode")]),t._v(" s1, const NodeKey & nodekey2, const NodeKey & nodekey3, const std::unordered_set< EdgeKey > & inds, const EdgeKey & ind2, const EdgeKey & ind3, const split_type & split_fun) "),a("br"),t._v("将格点1分解为格点2和格点3，inds为属于格点3点半边，格点2和格点3通过半边ind2和ind3相连。")],1)]),t._v(" "),a("tr",[a("td",[t._v("template <typename split_type >"),a("br"),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html"}},[t._v("network")]),t._v("< NodeVal, EdgeVal, NodeKey, EdgeKey, Trait >"),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("::IterNode")])],1),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-split"}},[t._v("split")])],1),t._v("("),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html"}},[t._v("network")]),t._v("< NodeVal, EdgeVal, NodeKey, EdgeKey, Trait >"),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("::IterNode")]),t._v(" s1, const NodeKey & nodekey2, const std::unordered_set< EdgeKey > & inds, const EdgeKey & ind1, const EdgeKey & ind2, const split_type & split_fun) "),a("br"),t._v("将格点1分解为格点1和格点2，inds为属于格点2点半边，格点1和格点2通过半边ind2和ind3相连。")],1)]),t._v(" "),a("tr",[a("td",[t._v("template <typename absorb_type ,typename contract_type >"),a("br"),t._v("void")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#function-tn_contract1"}},[t._v("tn_contract1")])],1),t._v("("),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html"}},[t._v("network")]),t._v("< NodeVal, EdgeVal, NodeKey, EdgeKey, Trait >"),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#using-iternode"}},[t._v("::IterNode")]),t._v(" it1, const std::set< NodeKey, typename Trait::nodekey_less > & group, NodeVal & ten, const absorb_type & absorb_fun, const contract_type & contract_fun) const "),a("br"),t._v("缩并的辅助函数")],1)])])]),t._v(" "),a("h2",{attrs:{id:"friends"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#friends"}},[t._v("#")]),t._v(" Friends")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",[t._v("Name")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("std::ostream &")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#friend-operator<<"}},[t._v("operator<<")])],1),t._v("(std::ostream & , const "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html"}},[t._v("network")]),t._v("< NodeVal1, EdgeVal1, NodeKey1, EdgeKey1, Trait1 > & ) "),a("br"),t._v("网络的字符串输出")],1)]),t._v(" "),a("tr",[a("td",[t._v("std::istream &")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#friend-operator>>"}},[t._v("operator>>")])],1),t._v("(std::istream & , "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html"}},[t._v("network")]),t._v("< NodeVal1, EdgeVal1, NodeKey1, EdgeKey1, Trait1 > & ) "),a("br"),t._v("网络的字符串输入")],1)]),t._v(" "),a("tr",[a("td",[t._v("std::ostream &")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#friend-operator<"}},[t._v("operator<")])],1),t._v("(std::ostream & , const "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html"}},[t._v("network")]),t._v("< NodeVal1, EdgeVal1, NodeKey1, EdgeKey1, Trait1 > & ) "),a("br"),t._v("网络的二进制输出")],1)]),t._v(" "),a("tr",[a("td",[t._v("std::istream &")]),t._v(" "),a("td",[a("strong",[a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html#friend-operator>"}},[t._v("operator>")])],1),t._v("(std::istream & , "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1network.html"}},[t._v("network")]),t._v("< NodeVal1, EdgeVal1, NodeKey1, EdgeKey1, Trait1 > & ) "),a("br"),t._v("网络的二进制输出")],1)])])]),t._v(" "),a("h2",{attrs:{id:"detailed-description"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#detailed-description"}},[t._v("#")]),t._v(" Detailed Description")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NodeVal")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EdgeVal")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NodeKey")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EdgeKey")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("stdEdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Trait")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("default_traits"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("net")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token base-clause"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("network")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("网络包含格点和格点上的半边，两个半边可以相连接")]),t._v(" "),a("p",[a("strong",[t._v("Template Parameters")]),t._v(":")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("NodeVal")]),t._v(" 每个格点中附着的信息类型")]),t._v(" "),a("li",[a("strong",[t._v("EdgeVal")]),t._v(" 每个边上附着的信息类型")]),t._v(" "),a("li",[a("strong",[t._v("NodeKey")]),t._v(" 格点名字的类型")]),t._v(" "),a("li",[a("strong",[t._v("EdgeKey")]),t._v(" 边的名字的类型")]),t._v(" "),a("li",[a("strong",[t._v("Trait")]),t._v(" 以上类型的特征，包括输入输出和比较")])]),t._v(" "),a("p",[a("strong",[t._v("See")]),t._v(": "),a("RouterLink",{attrs:{to:"/Classes/classnet_1_1node.html"}},[t._v("node")]),t._v(", "),a("RouterLink",{attrs:{to:"/Classes/structnet_1_1half__edge.html"}},[t._v("half_edge")])],1),t._v(" "),a("p",[t._v("每个格点和半边拥有一个名字，网络可以通过格点名称寻找格点和半边")]),t._v(" "),a("h2",{attrs:{id:"public-types-documentation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-types-documentation"}},[t._v("#")]),t._v(" Public Types Documentation")]),t._v(" "),a("h3",{attrs:{id:"using-iternode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-iternode"}},[t._v("#")]),t._v(" using IterNode")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" net"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("IterNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("network")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"using-nodetype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-nodetype"}},[t._v("#")]),t._v(" using NodeType")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" net"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("NodeType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"using-nodekeytype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-nodekeytype"}},[t._v("#")]),t._v(" using NodeKeyType")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" net"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("NodeKeyType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"using-nodekeysettype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-nodekeysettype"}},[t._v("#")]),t._v(" using NodeKeySetType")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" net"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("NodeKeySetType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Trait")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("nodekey_less"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"using-nodevaltype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-nodevaltype"}},[t._v("#")]),t._v(" using NodeValType")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" net"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("NodeValType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"using-edgekeytype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-edgekeytype"}},[t._v("#")]),t._v(" using EdgeKeyType")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" net"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("EdgeKeyType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"using-edgevaltype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-edgevaltype"}},[t._v("#")]),t._v(" using EdgeValType")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" net"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("EdgeValType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"using-traittype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#using-traittype"}},[t._v("#")]),t._v(" using TraitType")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" net"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("TraitType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  Trait"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"public-functions-documentation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#public-functions-documentation"}},[t._v("#")]),t._v(" Public Functions Documentation")]),t._v(" "),a("h3",{attrs:{id:"function-network"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-network"}},[t._v("#")]),t._v(" function network")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("network")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v("\n")])])]),a("h3",{attrs:{id:"function-network-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-network-2"}},[t._v("#")]),t._v(" function network")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("network")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" N\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"function-operator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-operator"}},[t._v("#")]),t._v(" function operator=")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" N\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"function-network-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-network-3"}},[t._v("#")]),t._v(" function network")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("network")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v("\n")])])]),a("h3",{attrs:{id:"function-operator-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-operator-2"}},[t._v("#")]),t._v(" function operator=")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v("\n")])])]),a("h3",{attrs:{id:"function-add"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-add"}},[t._v("#")]),t._v(" function add")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("IterNode "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("加一个格点，返回这个格点的iterator")]),t._v(" "),a("h3",{attrs:{id:"function-add-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-add-2"}},[t._v("#")]),t._v(" function add")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("加一个网络")]),t._v(" "),a("h3",{attrs:{id:"function-add-edge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-add-edge"}},[t._v("#")]),t._v(" function add_edge")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_edge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ind1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ind2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" edgeval "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("EdgeVal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("加一条边")]),t._v(" "),a("h3",{attrs:{id:"function-add-edge-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-add-edge-2"}},[t._v("#")]),t._v(" function add_edge")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_edge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    IterNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    IterNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("EdgeVal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"function-add-edge-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-add-edge-3"}},[t._v("#")]),t._v(" function add_edge")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_edge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" edgeval "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("EdgeVal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("加一条边。根据格点名字和Trait::bind自动生成边的名字")]),t._v(" "),a("h3",{attrs:{id:"function-add-edge-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-add-edge-4"}},[t._v("#")]),t._v(" function add_edge")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_edge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    IterNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    IterNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("EdgeVal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"function-connect-edge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-connect-edge"}},[t._v("#")]),t._v(" function connect_edge")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect_edge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ind1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ind2\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("连接两条半边")]),t._v(" "),a("h3",{attrs:{id:"function-connect-edge-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-connect-edge-2"}},[t._v("#")]),t._v(" function connect_edge")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect_edge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    IterNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    IterNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"function-add-half-edge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-add-half-edge"}},[t._v("#")]),t._v(" function add_half_edge")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_half_edge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ind1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" edgeval "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("EdgeVal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("加一条半边")]),t._v(" "),a("h3",{attrs:{id:"function-add-half-edge-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-add-half-edge-2"}},[t._v("#")]),t._v(" function add_half_edge")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_half_edge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    IterNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("EdgeVal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"function-del"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-del"}},[t._v("#")]),t._v(" function del")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("del")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("删除一个格点")]),t._v(" "),a("h3",{attrs:{id:"function-del-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-del-2"}},[t._v("#")]),t._v(" function del")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("del")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    IterNode \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"function-del-edges"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-del-edges"}},[t._v("#")]),t._v(" function del_edges")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("del_edges")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey2\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("删除两个格点之间的所有边")]),t._v(" "),a("h3",{attrs:{id:"function-del-edges-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-del-edges-2"}},[t._v("#")]),t._v(" function del_edges")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("del_edges")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    IterNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    IterNode \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"function-del-edge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-del-edge"}},[t._v("#")]),t._v(" function del_edge")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("del_edge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ind\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("删除一个腿连着的边")]),t._v(" "),a("h3",{attrs:{id:"function-del-edge-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-del-edge-2"}},[t._v("#")]),t._v(" function del_edge")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("del_edge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    IterNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"function-del-half-edge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-del-half-edge"}},[t._v("#")]),t._v(" function del_half_edge")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("del_half_edge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ind\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("删除一个半边")]),t._v(" "),a("h3",{attrs:{id:"function-del-half-edge-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-del-half-edge-2"}},[t._v("#")]),t._v(" function del_half_edge")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("del_half_edge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    IterNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"function-break-edge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-break-edge"}},[t._v("#")]),t._v(" function break_edge")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("break_edge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ind\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("将一个半边组成的边拆开")]),t._v(" "),a("h3",{attrs:{id:"function-break-edge-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-break-edge-2"}},[t._v("#")]),t._v(" function break_edge")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("break_edge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    IterNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"function-rename"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-rename"}},[t._v("#")]),t._v(" function rename")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("IterNode "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rename")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" old_key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" new_key\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("重命名一个格点")]),t._v(" "),a("h3",{attrs:{id:"function-rename-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-rename-2"}},[t._v("#")]),t._v(" function rename")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("IterNode "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rename")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" IterNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"function-edge-num"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-edge-num"}},[t._v("#")]),t._v(" function edge_num")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("edge_num")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nk\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("返回边数目")]),t._v(" "),a("h3",{attrs:{id:"function-edge-num-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-edge-num-2"}},[t._v("#")]),t._v(" function edge_num")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("edge_num")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" IterNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"function-absorb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-absorb"}},[t._v("#")]),t._v(" function absorb")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("absorb_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("contract_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("absorb")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" absorb_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" absorb_fun"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" contract_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" contract_fun\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("缩并两个格点，以及它们相连的边")]),t._v(" "),a("h3",{attrs:{id:"function-absorb-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-absorb-2"}},[t._v("#")]),t._v(" function absorb")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("absorb_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("contract_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("absorb")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    IterNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    IterNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" absorb_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" contract_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"function-split"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-split"}},[t._v("#")]),t._v(" function split")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("split_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("unordered_set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" inds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ind2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ind3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" split_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" split_fun\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("将格点1分解为格点2和格点3，inds为属于格点3点半边，格点2和格点3通过半边ind2和ind3相连。")]),t._v(" "),a("h3",{attrs:{id:"function-split-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-split-2"}},[t._v("#")]),t._v(" function split")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("split_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("pair"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" IterNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" IterNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    IterNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("unordered_set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" split_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"function-split-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-split-3"}},[t._v("#")]),t._v(" function split")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("split_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("unordered_set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" inds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ind1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ind2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" split_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" split_fun\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("将格点1分解为格点1和格点2，inds为属于格点2点半边，格点1和格点2通过半边ind2和ind3相连。")]),t._v(" "),a("h3",{attrs:{id:"function-split-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-split-4"}},[t._v("#")]),t._v(" function split")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("split_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nIterNode "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    IterNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("unordered_set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" split_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"function-gviz"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-gviz"}},[t._v("#")]),t._v(" function gviz")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gviz")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" title"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Trait")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("nodekey_less "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" groups"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" label_bond\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])]),a("p",[t._v("将网络转化为graphviz格式的字符串")]),t._v(" "),a("h3",{attrs:{id:"function-gviz-legend"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-gviz-legend"}},[t._v("#")]),t._v(" function gviz_legend")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("string "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gviz_legend")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("vector"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Trait")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("nodekey_less "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" groups\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])]),a("h3",{attrs:{id:"function-contains"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-contains"}},[t._v("#")]),t._v(" function contains")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("判断网络是否包含一个格点")]),t._v(" "),a("h3",{attrs:{id:"function-consistency"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-consistency"}},[t._v("#")]),t._v(" function consistency")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("consistency")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ostream "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" diagnosis "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("cout\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])]),a("p",[t._v("判断网络是否是没有冲突")]),t._v(" "),a("h3",{attrs:{id:"function-contract"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-contract"}},[t._v("#")]),t._v(" function contract")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("absorb_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("contract_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nNodeVal "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("contract")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" absorb_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" absorb_fun"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" contract_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" contract_fun\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])]),a("p",[t._v("缩并整个网络（不改变网络，只得到值）")]),t._v(" "),a("h3",{attrs:{id:"function-contract-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-contract-2"}},[t._v("#")]),t._v(" function contract")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("absorb_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("contract_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nNodeVal "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("contract")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Trait")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("nodekey_less "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" part"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" absorb_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" absorb_fun"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" contract_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" contract_fun\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])]),a("p",[t._v("缩并一部分网络（不改变网络，只得到值）")]),t._v(" "),a("h3",{attrs:{id:"function-contract-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-contract-tree"}},[t._v("#")]),t._v(" function contract_tree")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeType")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("absorb_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("contract_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nNodeVal "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("contract_tree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" TreeType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ctree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" absorb_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" absorb_fun"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" contract_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" contract_fun\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])]),a("p",[t._v("缩并一个树（不改变网络，只得到值）")]),t._v(" "),a("h3",{attrs:{id:"function-absorb-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-absorb-3"}},[t._v("#")]),t._v(" function absorb")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("absorb_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("contract_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nNodeKey "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("absorb")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Trait")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("nodekey_less "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" part"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" absorb_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" absorb_fun"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" contract_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" contract_fun\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("缩并一部分网络（改变网络）")]),t._v(" "),a("h3",{attrs:{id:"function-absorb-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-absorb-tree"}},[t._v("#")]),t._v(" function absorb_tree")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeType")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("absorb_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("contract_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nNodeKey "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("absorb_tree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("shared_ptr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" TreeType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" ctree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" absorb_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" absorb_fun"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" contract_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" contract_fun\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("缩并一个树（改变网络）")]),t._v(" "),a("h3",{attrs:{id:"function-tn-contract1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-tn-contract1"}},[t._v("#")]),t._v(" function tn_contract1")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("absorb_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("contract_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tn_contract1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Trait")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("nodekey_less "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" group"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    NodeVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ten"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" absorb_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" absorb_fun"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" contract_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" contract_fun\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])]),a("p",[t._v("缩并的辅助函数")]),t._v(" "),a("h3",{attrs:{id:"function-tn-contract1-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-tn-contract1-2"}},[t._v("#")]),t._v(" function tn_contract1")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("absorb_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("contract_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tn_contract1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    IterNode "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Trait")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("nodekey_less "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    NodeVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" absorb_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" contract_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])]),a("h3",{attrs:{id:"function-tn-contract2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-tn-contract2"}},[t._v("#")]),t._v(" function tn_contract2")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("absorb_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("contract_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nNodeVal "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tn_contract2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Trait")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("nodekey_less "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" group1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ten1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Trait")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("nodekey_less "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" group2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ten2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" absorb_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" absorb_fun"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" contract_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" contract_fun\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])]),a("p",[t._v("缩并的辅助函数")]),t._v(" "),a("h3",{attrs:{id:"function-fmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-fmap"}},[t._v("#")]),t._v(" function fmap")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NetType2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nNetType2 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fmap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("function"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NetType2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NodeValType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" f1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("function"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NetType2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("EdgeValType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" f2\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])]),a("p",[t._v("利用格点上的信息的函数和边上信息的函数从一个网络得到另一个网络")]),t._v(" "),a("h3",{attrs:{id:"function-fmap-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-fmap-2"}},[t._v("#")]),t._v(" function fmap")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NetType2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nNetType2 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fmap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("function"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NetType2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NodeValType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" f1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("function"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NetType2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("EdgeValType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" f2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("function"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NetType2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NodeKeyType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" f3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("function"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NetType2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("EdgeKeyType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" f4\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])]),a("p",[t._v("利用格点上的信息的函数和边上信息的函数从一个网络得到另一个网络，同时做sitekey和edgekey的变换")]),t._v(" "),a("h3",{attrs:{id:"function-gfmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-gfmap"}},[t._v("#")]),t._v(" function gfmap")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("NodeVal2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EdgeVal2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Trait2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nnetwork"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gfmap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("function"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NodeVal2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" f1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("function"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("EdgeVal2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" f2\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])]),a("p",[t._v("利用格点上的信息的函数和边上信息的函数从一个网络得到另一个网络")]),t._v(" "),a("h3",{attrs:{id:"function-fope"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-fope"}},[t._v("#")]),t._v(" function fope")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fope")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("function"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NodeVal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" f1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("function"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("EdgeVal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" f2\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("利用函数更新格点和边上的信息")]),t._v(" "),a("h3",{attrs:{id:"function-gfope"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-gfope"}},[t._v("#")]),t._v(" function gfope")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gfope")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("function"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NodeVal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" f1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("function"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("EdgeVal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" f2\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("利用函数更新格点和边上的信息，可用于初始化")]),t._v(" "),a("h3",{attrs:{id:"function-absorb-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-absorb-4"}},[t._v("#")]),t._v(" function absorb")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("absorb_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("contract_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("absorb")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("IterNode node_itr1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("IterNode node_itr2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" absorb_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" absorb_fun"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" contract_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" contract_fun\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("缩并两个格点，以及它们相连的边")]),t._v(" "),a("h3",{attrs:{id:"function-split-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-split-5"}},[t._v("#")]),t._v(" function split")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("split_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nstd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("pair"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("network")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("IterNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("network")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("IterNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("IterNode s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("unordered_set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" inds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ind2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ind3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" split_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" split_fun\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("将格点1分解为格点2和格点3，inds为属于格点3点半边，格点2和格点3通过半边ind2和ind3相连。")]),t._v(" "),a("h3",{attrs:{id:"function-split-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-split-6"}},[t._v("#")]),t._v(" function split")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("split_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nnetwork"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("IterNode "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("IterNode s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NodeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" nodekey2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("unordered_set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" inds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ind1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" EdgeKey "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ind2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" split_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" split_fun\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("将格点1分解为格点1和格点2，inds为属于格点2点半边，格点1和格点2通过半边ind2和ind3相连。")]),t._v(" "),a("h3",{attrs:{id:"function-tn-contract1-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function-tn-contract1-3"}},[t._v("#")]),t._v(" function tn_contract1")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("template")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("absorb_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("contract_type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tn_contract1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("IterNode it1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("set"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typename")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Trait")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("nodekey_less "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" group"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    NodeVal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" ten"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" absorb_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" absorb_fun"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" contract_type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" contract_fun\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v("\n")])])]),a("p",[t._v("缩并的辅助函数")]),t._v(" "),a("h2",{attrs:{id:"friends-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#friends-2"}},[t._v("#")]),t._v(" Friends")]),t._v(" "),a("h3",{attrs:{id:"friend-operator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#friend-operator"}},[t._v("#")]),t._v(" friend operator<<")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("friend")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ostream "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ostream "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("网络的字符串输出")]),t._v(" "),a("h3",{attrs:{id:"friend-operator-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#friend-operator-2"}},[t._v("#")]),t._v(" friend operator>>")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("friend")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("istream "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("istream "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("网络的字符串输入")]),t._v(" "),a("h3",{attrs:{id:"friend-operator-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#friend-operator-3"}},[t._v("#")]),t._v(" friend operator<")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("friend")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ostream "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("ostream "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("网络的二进制输出")]),t._v(" "),a("h3",{attrs:{id:"friend-operator-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#friend-operator-4"}},[t._v("#")]),t._v(" friend operator>")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("friend")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("istream "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),t._v("istream "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    network"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" NodeVal1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeVal1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NodeKey1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" EdgeKey1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Trait1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("网络的二进制输出")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("Updated on 15 June 2022 at 16:04:19 CST")])])}),[],!1,null,null,null);s.default=n.exports}}]);